/*
HOW TO USE:
1.  To run this script, you will need .root-files that have been generated by Jans RootReader (available at https://github.com/Uni2K/RootReader). 
2.  Depending on which and how many .root-files you want to analyze, set the parameters number_of_runs and run_number_vec (at the beginning of the main()-function).
3.  Select a parent directory. Within that directory, create three subdirectories named data, runs, and AngularDistribution (technically, the last subdirectory can be named whatever you like).
4.  Put the .root files into the data subdirectory. Put the AngularDistribution.cpp and AngularDistribution.sh files in the AngularDistribution subdirectory. Put the beam position picture into the parent
    directory.
5.  Navigate to the AngularDistribution subdirectory in your linux console, and execute the command ./AngularDistribution.sh
6.  The .sh script will compile the .cpp file and run it on each of the .root files in the data subdirectory.

WHAT THIS SCRIPT DOES:
1.  The .root file (which is passed by the .sh script as an argument) is opened and the TTree is read from it.
2.  Histograms are drawn representing the light yield of each channel for the measurement stored in the .root file.
3.  For each histogram (and therefore each channel), a mean value is found and used as an estimator for the total light yield.
4.  These values and their errors are stored in .txt-files for each run.
5.  After the last run has been completed, the values from all .txt files are read back into memory and normalized by dividing them by the light yield of the respective channel for a constant position.
    (I chose position 10, this can be manually changed. For this, look at the if-statement at the end of the main()-function.)
6.  The light yield for each channel is plotted for each measurement position.
*/


//Including root functionalities:
#include <TGraph.h>
#include <TGraphErrors.h>
#include <TMultiGraph.h>
#include <TLine.h>
#include <TH1F.h>
#include <TH2D.h>
#include <TStyle.h>
#include <TString.h>
#include <TCanvas.h>
#include <TFile.h>
#include <TTree.h>
#include <TH1D.h>
#include <TMath.h>
#include <TLegend.h>
#include <TCut.h>
#include <THStack.h>
#include <TGaxis.h>
#include <TF1.h>
#include <TError.h> // root verbosity level
#include <TApplication.h>
#include <TNtuple.h>
#include <TImage.h>
#include <TAttImage.h>

//Including standard C/C++-Libraries:
#include <sys/stat.h>
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <sstream>
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <ctime>



//################## MAIN FUNCTION #####################

int main(int argc, char* argv[])
{
    using namespace std;

    const int maxFileNumber = 9;        //For 1.4, 2.6, and 5.2 GeV for positions 9, 10, and 11
    cout << endl;
    string inPath = "../runs/PhotonCountDistribution/";
    string outPath = "../runs/AngularDistribution/";
    
    //Style Settings:
    gStyle->SetMarkerSize(3);
    gStyle->SetOptStat(0);
    gStyle->SetOptFit(0);
    gStyle->SetGridStyle(3);
    gStyle->SetGridWidth(1);
    gStyle->SetGridColor(16);
    gStyle->SetLineScalePS(1);

    const Int_t nCh = 8;                       //eight channels for WOM D (sum is not needed for this analysis at the moment)

    //Colors for positions 9, 10, 11:
    int colorList[3] = { 433,617,797 };

    //Angles corresponding to channels 0 - 7:
    Int_t angles[nCh] = { 135,180,225,270,90,45,0,315 };

    TTree* tree[maxFileNumber];

    //Run parameters:
    int runNumber[maxFileNumber];
    int runPosition[maxFileNumber];
    float runEnergy[maxFileNumber];
    int entryNumber;
    
    //Graphs for all energies and positions:
    TGraphErrors* graphVec14[3];            //Three error bar plots, one for each position, for 1.4 GeV
    TGraphErrors* graphVec26[3];            //for 2.6 GeV
    TGraphErrors* graphVec52[3];            //for 5.2 GeV
    TGraphErrors* graphVecNorm14[3];        //Three error bar plots, one for each position, all divided by position 10 values, for 1.4 GeV
    TGraphErrors* graphVecNorm26[3];        //for 2.6 GeV
    TGraphErrors* graphVecNorm52[3];        //for 5.2 GeV

    //Multigraphs for the three energies:
    TMultiGraph* distGraph14 = new TMultiGraph();
    distGraph14->SetTitle("; Azimutal angle #phi [degrees]; #hat{N_{pe}}");
    TMultiGraph* distGraph26 = new TMultiGraph();
    distGraph26->SetTitle("; Azimutal angle #phi [degrees]; #hat{N_{pe}}");
    TMultiGraph* distGraph52 = new TMultiGraph();
    distGraph52->SetTitle("; Azimutal angle #phi [degrees]; #hat{N_{pe}}");
    TMultiGraph* distGraphNorm14 = new TMultiGraph();
    distGraphNorm14->SetTitle("; Azimutal angle #phi [degrees]; #hat{N_{pe,red}}");
    TMultiGraph* distGraphNorm26 = new TMultiGraph();
    distGraphNorm26->SetTitle("; Azimutal angle #phi [degrees]; #hat{N_{pe,red}}");
    TMultiGraph* distGraphNorm52 = new TMultiGraph();
    distGraphNorm52->SetTitle("; Azimutal angle #phi [degrees]; #hat{N_{pe,red}}");

    //Legends:
    TLegend* distLegend14 = new TLegend(0.66, 0.17, 0.9, 0.41);
    TLegend* distLegend26 = new TLegend(0.66, 0.17, 0.9, 0.41);
    TLegend* distLegend52 = new TLegend(0.66, 0.17, 0.9, 0.41);
    TLegend* distLegendNorm14 = new TLegend(0.66, 0.17, 0.9, 0.41);
    TLegend* distLegendNorm26 = new TLegend(0.66, 0.17, 0.9, 0.41);
    TLegend* distLegendNorm52 = new TLegend(0.66, 0.17, 0.9, 0.41);

    //Canvases:
    TCanvas* distCanvas14 = new TCanvas("distCanvas14", "distCanvas14", 1920, 1080);
    TCanvas* distCanvas26 = new TCanvas("distCanvas26", "distCanvas26", 1920, 1080);
    TCanvas* distCanvas52 = new TCanvas("distCanvas52", "distCanvas52", 1920, 1080);
    TCanvas* distCanvasNorm14 = new TCanvas("distCanvasNorm14", "distCanvasNorm14", 1920, 1080);
    TCanvas* distCanvasNorm26 = new TCanvas("distCanvasNorm26", "distCanvasNorm26", 1920, 1080);
    TCanvas* distCanvasNorm52 = new TCanvas("distCanvasNorm52", "distCanvasNorm52", 1920, 1080);

    //Loop over files:
    for (int arg = 1; arg < argc; arg++)
    {
        tree[arg] = new TTree;
        string filePath = argv[arg];
        printf("Analyzing file %s\n", filePath.c_str());

        //Open .root file:
        TFile file(filePath.c_str());
        if (file.IsZombie())
        {
            cout << "Problem with file " << filePath << "; check if file path is correct!" << endl;
            exit(-1);
        }

        //Reading Data from file into our own TTree:
        file.GetObject("T", tree[arg]);
        tree[arg]->SetBranchAddress("runNumber", &runNumber[arg]);
        tree[arg]->SetBranchAddress("runPosition", &runPosition[arg]);
        tree[arg]->SetBranchAddress("runEnergy", &runEnergy[arg]);
        tree[arg]->GetEntry(1);

        switch (runNumber[arg])
        {
        case 30:
            graphVec26[0] = new TGraphErrors(Form("%smeanList_run%d.txt", inPath.c_str(), runNumber[arg]), "%lg %lg %lg", "");
            graphVecNorm26[0] = new TGraphErrors(Form("%sreducedValues26.txt", inPath.c_str()), "%lg %lg %lg %*lg %*lg %*lg %*lg");
        case 31:
            graphVec14[0] = new TGraphErrors(Form("%smeanList_run%d.txt", inPath.c_str(), runNumber[arg]), "%lg %lg %lg", "");
            graphVecNorm14[0] = new TGraphErrors(Form("%sreducedValues14.txt", inPath.c_str()), "%lg %lg %lg %*lg %*lg %*lg %*lg");
        case 32:
            graphVec52[0] = new TGraphErrors(Form("%smeanList_run%d.txt", inPath.c_str(), runNumber[arg]), "%lg %lg %lg", "");
            graphVecNorm52[0] = new TGraphErrors(Form("%sreducedValues52.txt", inPath.c_str()), "%lg %lg %lg %*lg %*lg %*lg %*lg");
        case 33:
            graphVec52[1] = new TGraphErrors(Form("%smeanList_run%d.txt", inPath.c_str(), runNumber[arg]), "%lg %lg %lg", "");
            graphVecNorm52[1] = new TGraphErrors(Form("%sreducedValues52.txt", inPath.c_str()), "%lg %*lg %*lg %lg %lg %*lg %*lg");
        case 34:
            graphVec26[1] = new TGraphErrors(Form("%smeanList_run%d.txt", inPath.c_str(), runNumber[arg]), "%lg %lg %lg", "");
            graphVecNorm26[1] = new TGraphErrors(Form("%sreducedValues26.txt", inPath.c_str()), "%lg %*lg %*lg %lg %lg %*lg %*lg");
        case 35:
            graphVec14[1] = new TGraphErrors(Form("%smeanList_run%d.txt", inPath.c_str(), runNumber[arg]), "%lg %lg %lg", "");
            graphVecNorm14[1] = new TGraphErrors(Form("%sreducedValues14.txt", inPath.c_str()), "%lg %*lg %*lg %lg %lg %*lg %*lg");
        case 36:
            graphVec14[2] = new TGraphErrors(Form("%smeanList_run%d.txt", inPath.c_str(), runNumber[arg]), "%lg %lg %lg", "");
            graphVecNorm14[2] = new TGraphErrors(Form("%sreducedValues14.txt", inPath.c_str()), "%lg %*lg %*lg %*lg %*lg %lg %lg");
        case 37:
            graphVec26[2] = new TGraphErrors(Form("%smeanList_run%d.txt", inPath.c_str(), runNumber[arg]), "%lg %lg %lg", "");
            graphVecNorm26[2] = new TGraphErrors(Form("%sreducedValues26.txt", inPath.c_str()), "%lg %*lg %*lg %*lg %*lg %lg %lg");
        case 38:
            graphVec52[2] = new TGraphErrors(Form("%smeanList_run%d.txt", inPath.c_str(), runNumber[arg]), "%lg %lg %lg", "");
            graphVecNorm52[2] = new TGraphErrors(Form("%sreducedValues52.txt", inPath.c_str()), "%lg %*lg %*lg %*lg %*lg %lg %lg");
        }
    } //END OF LOOP OVER ARGUMENTS

    //Specifying optical properties of graphs, building multigraphs and legends:
    for (int i = 0; i < 3; i++)
    {
        gStyle->SetTitleSize(0.055, "t");

        graphVec14[i]->SetLineColor(colorList[i]);
        graphVec14[i]->SetMarkerStyle(47);
        graphVec14[i]->SetLineWidth(5);
        graphVecNorm14[i]->SetLineColor(colorList[i]);
        graphVecNorm14[i]->SetMarkerStyle(47);
        graphVecNorm14[i]->SetLineWidth(5);
        distGraph14->Add(graphVec14[i]);
        distGraphNorm14->Add(graphVecNorm14[i]);
        distLegend14->AddEntry(graphVec14[i], Form("Position %d", i + 9), "LPE");
        distLegendNorm14->AddEntry(graphVecNorm14[i], Form("Position %d", i + 9), "LPE");

        graphVec26[i]->SetLineColor(colorList[i]);
        graphVec26[i]->SetMarkerStyle(47);
        graphVec26[i]->SetLineWidth(5);
        graphVecNorm26[i]->SetLineColor(colorList[i]);
        graphVecNorm26[i]->SetMarkerStyle(47);
        graphVecNorm26[i]->SetLineWidth(5);
        distGraph26->Add(graphVec26[i]);
        distGraphNorm26->Add(graphVecNorm26[i]);
        distLegend26->AddEntry(graphVec26[i], Form("Position %d", i + 9), "LPE");
        distLegendNorm26->AddEntry(graphVecNorm26[i], Form("Position %d", i + 9), "LPE");

        graphVec52[i]->SetLineColor(colorList[i]);
        graphVec52[i]->SetMarkerStyle(47);
        graphVec52[i]->SetLineWidth(5);
        graphVecNorm52[i]->SetLineColor(colorList[i]);
        graphVecNorm52[i]->SetMarkerStyle(47);
        graphVecNorm52[i]->SetLineWidth(5);
        distGraph52->Add(graphVec52[i]);
        distGraphNorm52->Add(graphVecNorm52[i]);
        distLegend52->AddEntry(graphVec52[i], Form("Position %d", i + 9), "LPE");
        distLegendNorm52->AddEntry(graphVecNorm52[i], Form("Position %d", i + 9), "LPE");
    }

    distGraph14->GetXaxis()->SetTitleSize(.055);
    distGraph14->GetXaxis()->SetLabelSize(.045);
    distGraph14->GetYaxis()->SetTitleSize(.055);
    distGraph14->GetYaxis()->SetLabelSize(.045);

    distGraphNorm14->GetXaxis()->SetTitleSize(.055);
    distGraphNorm14->GetXaxis()->SetLabelSize(.045);
    distGraphNorm14->GetYaxis()->SetTitleSize(.055);
    distGraphNorm14->GetYaxis()->SetLabelSize(.045);

    distGraph26->GetXaxis()->SetTitleSize(.055);
    distGraph26->GetXaxis()->SetLabelSize(.045);
    distGraph26->GetYaxis()->SetTitleSize(.055);
    distGraph26->GetYaxis()->SetLabelSize(.045);

    distGraphNorm26->GetXaxis()->SetTitleSize(.055);
    distGraphNorm26->GetXaxis()->SetLabelSize(.045);
    distGraphNorm26->GetYaxis()->SetTitleSize(.055);
    distGraphNorm26->GetYaxis()->SetLabelSize(.045);

    distGraph52->GetXaxis()->SetTitleSize(.055);
    distGraph52->GetXaxis()->SetLabelSize(.045);
    distGraph52->GetYaxis()->SetTitleSize(.055);
    distGraph52->GetYaxis()->SetLabelSize(.045);

    distGraphNorm52->GetXaxis()->SetTitleSize(.055);
    distGraphNorm52->GetXaxis()->SetLabelSize(.045);
    distGraphNorm52->GetYaxis()->SetTitleSize(.055);
    distGraphNorm52->GetYaxis()->SetLabelSize(.045);

    //Customizing legend:
    distLegend14->SetFillColorAlpha(kWhite, .7);
    distLegend26->SetFillColorAlpha(kWhite, .7);
    distLegend52->SetFillColorAlpha(kWhite, .7);
    distLegendNorm14->SetFillColorAlpha(kWhite, .7);
    distLegendNorm26->SetFillColorAlpha(kWhite, .7);
    distLegendNorm52->SetFillColorAlpha(kWhite, .7);
    
    TAxis* xAxis14 = distGraph14->GetXaxis();
    TAxis* yAxis14 = distGraph14->GetYaxis();
    TAxis* xAxis26 = distGraph26->GetXaxis();
    TAxis* yAxis26 = distGraph26->GetYaxis();
    TAxis* xAxis52 = distGraph52->GetXaxis();
    TAxis* yAxis52 = distGraph52->GetYaxis();
    TAxis* xAxisNorm14 = distGraphNorm14->GetXaxis();
    TAxis* yAxisNorm14 = distGraphNorm14->GetYaxis();
    TAxis* xAxisNorm26 = distGraphNorm26->GetXaxis();
    TAxis* yAxisNorm26 = distGraphNorm26->GetYaxis();
    TAxis* xAxisNorm52 = distGraphNorm52->GetXaxis();
    TAxis* yAxisNorm52 = distGraphNorm52->GetYaxis();

    //x axis partitions:
    xAxis14->SetLimits(0, 360);
    xAxis26->SetLimits(0, 360);
    xAxis52->SetLimits(0, 360);
    xAxisNorm14->SetLimits(0, 360);
    xAxisNorm26->SetLimits(0, 360);
    xAxisNorm52->SetLimits(0, 360);
    xAxis14->SetNdivisions(8, 8, 4, false);
    xAxis26->SetNdivisions(8, 8, 4, false);
    xAxis52->SetNdivisions(8, 8, 4, false);
    xAxisNorm14->SetNdivisions(8, 8, 4, false);
    xAxisNorm26->SetNdivisions(8, 8, 4, false);
    xAxisNorm52->SetNdivisions(8, 8, 4, false);

    //y axis ranges (set manually after seeing the outcomes):
    yAxis14->SetRangeUser(0.115, 0.135);
    yAxis26->SetRangeUser(0.115, 0.135);
    yAxis52->SetRangeUser(0.115, 0.135);
    yAxisNorm14->SetRangeUser(0.965, 1.035);
    yAxisNorm26->SetRangeUser(0.965, 1.035);
    yAxisNorm52->SetRangeUser(0.965, 1.035);

    //Drawing and saving pdfs:
    distCanvas14->cd();
    distCanvas14->SetGrid();
    gPad->SetLeftMargin(.18);
    gPad->SetBottomMargin(.17);
    distGraph14->Draw("ALP");
    distLegend14->Draw("same");
    distCanvas14->SaveAs(Form("%sdist14.pdf", outPath.c_str()));
    distCanvas26->cd();
    distCanvas26->SetGrid();
    gPad->SetLeftMargin(.18);
    gPad->SetBottomMargin(.17);
    distGraph26->Draw("ALP");
    distLegend26->Draw("same");
    distCanvas26->SaveAs(Form("%sdist26.pdf", outPath.c_str()));
    distCanvas52->cd();
    distCanvas52->SetGrid();
    gPad->SetLeftMargin(.18);
    gPad->SetBottomMargin(.17);
    distGraph52->Draw("ALP");
    distLegend52->Draw("same");
    distCanvas52->SaveAs(Form("%sdist52.pdf", outPath.c_str()));
    distCanvasNorm14->cd();
    distCanvasNorm14->SetGrid();
    gPad->SetLeftMargin(.18);
    gPad->SetBottomMargin(.17);
    distGraphNorm14->Draw("ALP");
    distLegendNorm14->Draw("same");
    distCanvasNorm14->SaveAs(Form("%sdistNorm14.pdf", outPath.c_str()));
    distCanvasNorm26->cd();
    distCanvasNorm26->SetGrid();
    gPad->SetLeftMargin(.18);
    gPad->SetBottomMargin(.17);
    distGraphNorm26->Draw("ALP");
    distLegendNorm26->Draw("same");
    distCanvasNorm26->SaveAs(Form("%sdistNorm26.pdf", outPath.c_str()));
    distCanvasNorm52->cd();
    distCanvasNorm52->SetGrid();
    gPad->SetLeftMargin(.18);
    gPad->SetBottomMargin(.17);
    distGraphNorm52->Draw("ALP");
    distLegendNorm52->Draw("same");
    distCanvasNorm52->SaveAs(Form("%sdistNorm52.pdf", outPath.c_str()));

    cout << endl << "Distributions saved successfully!" << endl;
}